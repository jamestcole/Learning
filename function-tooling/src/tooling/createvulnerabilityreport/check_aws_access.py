from typing import Any

import boto3
from eks_token import get_token  # type: ignore
from kubernetes import client
from kubernetes.config import kube_config

from tooling.createvulnerabilityreport.create_kube_config import create_kube_config


def check_aws_access(event: dict[str, Any]) -> None:
    try:
        sts_client = boto3.client("sts")
        response = sts_client.get_caller_identity()
        print(f'Successfully retrieved AWS credentials {response["Arn"]}')
    except Exception as ex:
        print(f'FAILED to retrieve AWS credentials: {ex}')
    try:
        eks_client = boto3.client("eks")
        print(f'Successfully retrieved EKS clusters: {eks_client.list_clusters()["clusters"]}')
    except Exception as ex:
        print(f'FAILED to retrieve EKS clusters: {ex}')
    try:
        token = get_token(cluster_name=event["cluster"], region_name=event["region"])["status"]["token"]
        kube_config.load_kube_config_from_dict(create_kube_config(token))
        v1 = client.CoreV1Api()  # nosec
        namespaces = v1.list_namespace()
        namespace_names = [ns.metadata.name for ns in namespaces.items if ns.metadata is not None]
        print(f'Successfully retrieved EKS namespaces: {namespace_names}')
    except Exception as ex:
        print(f'FAILED to retrieve EKS namespaces: {ex}')
    try:
        s3_client = boto3.client("s3")
        s3_client.put_object(Bucket="rbs.mobile.ire.nonprod.inspector", Key="test_file", Body="test")
        print("Successfully stored item in S3")
    except Exception as ex:
        print(f'FAILED to store item in S3: {ex}')
